"""Define the data classes using Pydantic, making it possible to configure the chat application and do input validation."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_config.ipynb.

# %% auto 0
__all__ = ['AppTheme', 'ModelConfig', 'Message', 'ChatAppConfig']

# %% ../../nbs/00_config.ipynb 3
from pydantic import BaseModel, Field
from typing import Optional, List, Tuple, Literal
import os
from pathlib import Path
from dotenv import load_dotenv

# %% ../../nbs/00_config.ipynb 4
# Load environment variables from .env file
load_dotenv()

# %% ../../nbs/00_config.ipynb 7
class AppTheme(BaseModel):
    """Configuration for the visual theme of the app"""
    primary_color: str = Field(default="blue", description="Primary color for UI elements")
    secondary_color: str = Field(default="orange", description="Secondary color for UI elements")
    background_color: str = Field(default="zinc", description="Background color")
    logo_path: Optional[Path] = Field(default=None, description="Path to logo image")

# %% ../../nbs/00_config.ipynb 10
class ModelConfig(BaseModel):
    """Configuration for the LLM model"""
    model_name: str = Field(..., description="Name or path of the model to use")
    provider: str = Field(default="huggingface", description="Model provider (huggingface, openai, etc)")
    api_key_env_var: Optional[str] = Field(default=None, description="Environment variable name for API key")
    api_base_url: Optional[str] = Field(default=None, description="Base URL for API reqeuest")
    max_tokens: int = Field(default=1024, description="Maximum tokens to generate")
    temperature: float = Field(default=0.7, description="Temperature for generation")
    stop_sequences: Optional[List[str]] = Field(default=["\nUser:", "<|endoftext|>"], description="Sequences to stop generation")
    
    @property
    def api_key(self) -> Optional[str]:
        """Get the API key from environment variables if specified"""
        if self.api_key_env_var:
            if os.environ.get(self.api_key_env_var):
                return os.environ.get(self.api_key_env_var)
            raise ValueError(f"The environment variable {self.api_key_env_var} is not found in the .env file.")
        return None

# %% ../../nbs/00_config.ipynb 12
class Message(BaseModel):
    """A message in a conversation"""
    role: Literal["system", "user", "assistant"] = Field(..., description="Role of the message sender")
    content: str = Field(..., description="Content of the message")

# %% ../../nbs/00_config.ipynb 14
class ChatAppConfig(BaseModel):
    """Main configuration for a chat application"""
    app_name: str = Field(..., description="Name of the application")
    description: str = Field(default="", description="Description of the application")
    system_prompt: str = Field(..., description="System prompt for the LLM")
    starter_prompt: Optional[str] = Field(default=None, description="Initial prompt to start the conversation")
    context_files: List[Path] = Field(default=[], description="List of markdown files for additional context")
    model: ModelConfig
    theme: AppTheme = Field(default_factory=AppTheme)
    show_system_prompt: bool = Field(default=True, description="Whether to show system prompt in UI")
    show_context: bool = Field(default=True, description="Whether to show context in UI")
