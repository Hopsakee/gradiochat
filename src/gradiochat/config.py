"""Define the data classes using Pydantic, making it possible to configure the chat application and do input validation."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_config.ipynb.

# %% auto 0
__all__ = ['AppTheme', 'ModelConfig', 'ChatAppConfig', 'BaseChatApp', 'foo']

# %% ../../nbs/00_config.ipynb 4
# Load environment variables from .env file
load_dotenv()

# %% ../../nbs/00_config.ipynb 7
class AppTheme(BaseModel):
    """Configuration for the visual theme of the app"""
    primary_color: str = Field(default="#007BFF", description="Primary color for UI elements")
    secondary_color: str = Field(default="#6C757D", description="Secondary color for UI elements")
    background_color: str = Field(default="#FFFFFF", description="Background color")
    text_color: str = Field(default="#212529", description="Main text color")
    logo_path: Optional[Path] = Field(default=None, description="Path to logo image")

# %% ../../nbs/00_config.ipynb 10
class ModelConfig(BaseModel):
    """Configuration for the LLM model"""
    model_name: str = Field(..., description="Name or path of the model to use")
    provider: str = Field(default="huggingface", description="Model provider (huggingface, openai, etc)")
    api_key_env_var: Optional[str] = Field(default=None, description="Environment variable name for API key")
    max_tokens: int = Field(default=1024, description="Maximum tokens to generate")
    temperature: float = Field(default=0.7, description="Temperature for generation")
    stop_sequences: List[str] = Field(default=["\nUser:", "<|endoftext|>"], description="Sequences to stop generation")
    
    @property
    def api_key(self) -> Optional[str]:
        """Get the API key from environment variables if specified"""
        if self.api_key_env_var:
            return os.environ.get(self.api_key_env_var)
        return None

# %% ../../nbs/00_config.ipynb 12
class ChatAppConfig(BaseModel):
    """Main configuration for a chat application"""
    app_name: str = Field(..., description="Name of the application")
    description: str = Field(default="", description="Description of the application")
    system_prompt: str = Field(..., description="System prompt for the LLM")
    starter_prompt: Optional[str] = Field(default=None, description="Initial prompt to start the conversation")
    context_files: List[Path] = Field(default=[], description="List of markdown files for additional context")
    model: ModelConfig
    theme: AppTheme = Field(default_factory=AppTheme)
    show_system_prompt: bool = Field(default=True, description="Whether to show system prompt in UI")
    show_context: bool = Field(default=True, description="Whether to show context in UI")

# %% ../../nbs/00_config.ipynb 15
class BaseChatApp:
    """Base class for creating configurable chat applications with Gradio"""
    
    def __init__(self, config: ChatAppConfig):
        self.config = config
        self.chat_history = []
        self._load_context()
        
    def _load_context(self) -> None:
        """Load context from markdown files"""
        self.context_text = ""
        for file_path in self.config.context_files:
            if file_path.exists() and file_path.is_file():
                with open(file_path, 'r', encoding='utf-8') as f:
                    self.context_text += f.read() + "\n\n"
    
    def format_prompt(self, message: str, chat_history: List[Tuple[str, str]]) -> str:
        """Format the prompt with system message, context, and chat history"""
        # Start with system prompt
        prompt = f"System: {self.config.system_prompt}\n\n"
        
        # Add context if available
        if self.context_text:
            # This part might need customization based on the model provider
            prompt += f"Additional information: {self.context_text}\n\n"
        
        # Add chat history
        for user_msg, assistant_msg in chat_history:
            prompt += f"User: {user_msg}\nAssistant: {assistant_msg}\n\n"
        
        # Add current message
        prompt += f"User: {message}\nAssistant:"
        
        return prompt

# %% ../../nbs/00_config.ipynb 16
def foo(): pass
