"""Gradio interface for the chat application."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_ui.ipynb.

# %% auto 0
__all__ = ['GradioChat', 'create_chat_app']

# %% ../../nbs/02_ui.ipynb 3
import gradio as gr
from typing import List, Tuple, Generator, Dict, Any, Optional
from .config import ChatAppConfig
from .app import BaseChatApp

# %% ../../nbs/02_ui.ipynb 4
class GradioChat:
    """Gradio interface for the chat application"""
    
    def __init__(self, app: BaseChatApp):
        """Initialize with a configured BaseChatApp"""
        self.app = app
        self.interface = None
    
    def respond(self, message: str, chat_history: List[Tuple[str, str]]) -> Tuple[str, List[Tuple[str, str]]]:
        """Generate a response to the user message and update chat history"""
        # Store the current chat history in the app
        self.app.chat_history = chat_history
        
        # Generate response
        response = self.app.generate_response(message)
        
        # Update chat history
        chat_history.append((message, response))
        
        # Return empty message (to clear input) and updated history
        return "", chat_history
    
    def respond_stream(self, message: str, chat_history: List[Tuple[str, str]]) -> Generator[Tuple[str, List[Tuple[str, str]]], None, None]:
        """Generate a streaming response to the user message"""
        # Store the current chat history in the app
        self.app.chat_history = chat_history
        
        # Add user message to history with empty assistant response
        chat_history.append((message, ""))
        
        # Stream the response
        accumulated_text = ""
        for text_chunk in self.app.generate_stream(message):
            accumulated_text += text_chunk
            
            # Update the last assistant message
            updated_history = chat_history[:-1] + [(message, accumulated_text)]
            
            # Yield empty message and updated history
            yield "", updated_history
    
    def build_interface(self) -> gr.Blocks:
        """Build and return the Gradio interface"""
        with gr.Blocks(
            theme=gr.themes.Base(
                primary_hue=self.app.config.theme.primary_color,
                secondary_hue=self.app.config.theme.secondary_color,
                neutral_hue=self.app.config.theme.background_color,
                # text_color=self.app.config.theme.text_color
            )
        ) as interface:
            # App title and description
            gr.Markdown(f"# {self.app.config.app_name}")
            if self.app.config.description:
                gr.Markdown(self.app.config.description)
            
            # Chat interface
            chatbot = gr.Chatbot(height=500, label="Conversation")
            msg = gr.Textbox(
                placeholder="Type your message here...",
                label="Your message",
                lines=2
            )
            
            # Buttons
            with gr.Row():
                submit_btn = gr.Button("Send", variant="primary")
                clear_btn = gr.ClearButton([msg, chatbot], value="Clear chat")
            
            # System prompt and context viewer (collapsible)
            with gr.Accordion("View System Information", open=False):
                if self.app.config.show_system_prompt:
                    gr.Markdown(f"### System Prompt\n{self.app.config.system_prompt}")
                
                if self.app.config.show_context and self.app.context_text:
                    gr.Markdown(f"### Additional Context\n{self.app.context_text}")
            
            # Set up event handlers
            submit_btn.click(
                self.respond,
                inputs=[msg, chatbot],
                outputs=[msg, chatbot]
            )
            
            msg.submit(
                self.respond,
                inputs=[msg, chatbot],
                outputs=[msg, chatbot]
            )
            
            # Initialize with starter prompt if available
            if self.app.config.starter_prompt:
                chatbot.value = [("", self.app.config.starter_prompt)]
            
            self.interface = interface
            return interface
    
    def launch(self, **kwargs):
        """Launch the Gradio interface"""
        if self.interface is None:
            self.build_interface()
        
        return self.interface.launch(**kwargs)

# %% ../../nbs/02_ui.ipynb 5
def create_chat_app(config: ChatAppConfig) -> GradioChat:
    """Create a complete chat application from a configuration"""
    base_app = BaseChatApp(config)
    return GradioChat(base_app)
